// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstname     String
  lastname      String
  username      String          @unique
  password      String
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Posts         Post[]
  Votes         Vote[]
  comments      Comment[]
  savedPosts    SavedPost[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  TagsFollowed   TagsFollowed[]
  Chamber        Chamber[]
  chamberMembers ChamberMember[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id          String            @id @default(uuid())
  title       String
  main_text   String?           @db.LongText
  description String            @db.Text
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes       Vote[]
  comments    Comment[]
  saves       SavedPost[]
  tags        TagsOnPost[]
  attachments PostAttachments[]
  is_hidden   Boolean           @default(false)
  is_archived Boolean           @default(false)
  views       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Chamber     Chamber[]
  // chamberId   Strjing
}

model PostAttachments {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  cid       String
  fileId    String
  type      String // e.g., 'image', 'video', 'document'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, cid])
}

model Vote {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  positive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String   @id @default(uuid())
  postId          String
  post            Post     @relation(fields: [postId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description     String
  parentCommentId String?
  depth           Int      @default(0)
  path            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Tag {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  posts        TagsOnPost[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TagsFollowed TagsFollowed[]
}

model TagsOnPost {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, tagId])
}

model TagsFollowed {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tagId])
  @@unique([userId, tagId])
}

model SavedPost {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, postId])
}

model Chamber {
  id            String          @id @default(uuid())
  frequency     String?         @unique
  name          String          @unique
  description   String?         @db.Text
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChamberMember ChamberMember[]

  @@index([userId])
}

model ChamberMember {
  id        String   @id @default(uuid())
  chamberId String
  chamber   Chamber  @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String // e.g., 'admin', 'member'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chamberId, userId])
  @@index([chamberId])
  @@index([userId])
}
