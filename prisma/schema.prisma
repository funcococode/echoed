// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstname     String         
  lastname      String        
  username      String         @unique
  password      String         
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Posts Post[]
  Votes Vote[]
  comments Comment[]
  tag Tag[]
  savedPosts SavedPost[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Post{
  id String @id @default(uuid())
  title String
  description String @db.Text
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes Vote[]
  comments Comment[]
  tag Tag[]
  saves SavedPost[]
  views Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote{
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  positive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment{
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag{
  id String @id @default(uuid())
  name String
  description String
  postId String
  post Post[]
  userId String
  user User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedPost{
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}