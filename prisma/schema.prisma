// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstname     String
  lastname      String
  displayName   String?
  username      String          @unique
  password      String
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  bio           String?         @db.Text
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Posts         Post[]
  Votes         Vote[]
  comments      Comment[]
  savedPosts    SavedPost[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TagsFollowed    TagsFollowed[]
  Chamber         Chamber[]
  chamberMembers  ChamberMember[]
  ChamberEchoFlag ChamberEchoFlag[] @relation("FlagCreatedBy")

  /// Optional denormalized counters (kept in sync in actions)
  followersCount Int @default(0)
  followingCount Int @default(0)

  /// Follow relations
  followers Follow[]      @relation("Followers") // other users who follow this user
  following Follow[]      @relation("Following") // users this user follows
  settings  UserSettings?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id                  String                @id @default(uuid())
  title               String
  main_text           String?               @db.LongText
  description         String                @db.Text
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes               Vote[]
  comments            Comment[]
  saves               SavedPost[]
  tags                TagsOnPost[]
  attachments         PostAttachments[]
  is_hidden           Boolean               @default(false)
  is_archived         Boolean               @default(false)
  views               Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Chamber             Chamber[]
  // chamberId   Strjing
  PinnedChamberEchoes PinnedChamberEchoes[]
  ChamberEchoFlag     ChamberEchoFlag[]
}

model PostAttachments {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  cid       String
  fileId    String
  type      String // e.g., 'image', 'video', 'document'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, cid])
}

model Vote {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  positive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String   @id @default(uuid())
  postId          String
  post            Post     @relation(fields: [postId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description     String
  parentCommentId String?
  depth           Int      @default(0)
  path            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Tag {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  posts        TagsOnPost[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TagsFollowed TagsFollowed[]
}

model TagsOnPost {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, tagId])
}

model TagsFollowed {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tagId])
  @@unique([userId, tagId])
}

model SavedPost {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, postId])
}

model Chamber {
  id                  String                @id @default(uuid())
  frequency           String?               @unique
  name                String                @unique
  description         String?               @db.Text
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts               Post[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ChamberMember       ChamberMember[]
  PinnedChamberEchoes PinnedChamberEchoes[]
  ChamberEchoFlag     ChamberEchoFlag[]

  @@index([userId])
}

model ChamberMember {
  id                  String            @id @default(uuid())
  chamberId           String
  chamber             Chamber           @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  userId              String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                ChamberMemberRole @relation(fields: [chamberMemberRoleId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  chamberMemberRoleId String

  @@unique([chamberId, userId])
  @@index([chamberId])
  @@index([userId])
}

enum ChamberRoles {
  CREATOR
  LISTENER
  MODERATOR
}

model ChamberMemberRole {
  id            String          @id @default(uuid())
  name          ChamberRoles
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChamberMember ChamberMember[]

  @@unique([name])
}

// model for pinned echoes on chamber

model PinnedChamberEchoes {
  id        String   @id @default(uuid())
  echoId    String
  echo      Post     @relation(fields: [echoId], references: [id], onDelete: Cascade)
  chamberId String
  chamber   Chamber  @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([echoId, chamberId])
}

// ── Enums ─────────────────────────────────────────────────────────────────────
enum EchoFlagType {
  NSFW
  ABUSE
  HARASSMENT
  HATE
  SPAM
  COPYRIGHT
  MISINFO
  SELF_HARM
  VIOLENCE
  ILLEGAL
  SCAM
  OTHER
}

enum EchoFlagStatus {
  OPEN // active & enforced
  RESOLVED // handled; optionally keep for audit
  REJECTED // raised but dismissed
}

enum EchoFlagSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ── Model: one row per (Chamber x Post x FlagType) ───────────────────────────
model ChamberEchoFlag {
  id        String           @id @default(cuid())
  chamberId String
  postId    String
  type      EchoFlagType
  status    EchoFlagStatus   @default(OPEN)
  severity  EchoFlagSeverity @default(MEDIUM)

  notes        String? // moderator note / context
  createdById  String
  resolvedById String?
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations (adjust names if your models differ)
  chamber   Chamber @relation(fields: [chamberId], references: [id], onDelete: Cascade)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy User    @relation("FlagCreatedBy", fields: [createdById], references: [id])

  // One flag type per echo within a chamber
  @@unique([chamberId, postId, type])
  // Helpful indices for moderation dashboards & feeds
  @@index([chamberId, postId])
  @@index([status, type])
  @@index([type])
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

//  SETTINGS PAGE

enum UserVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum CommentPermission {
  EVERYONE
  FOLLOWERS
  NOBODY
}

enum FeedStyle {
  FOLLOWING
  LATEST
  MIXED
}

enum ThemePreference {
  light
  dark
  system
}

enum EchoLayoutDensity {
  FULL
  COMPACT
  SLIM
  MINIMAL
}

enum FeedDensity {
  ROWS
  GRID
}

model UserSettings {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Privacy & Safety
  profileVisibility   UserVisibility    @default(PUBLIC)
  allowComments       CommentPermission @default(EVERYONE)
  blurNSFW            Boolean           @default(true)
  discoverableByEmail Boolean           @default(false)

  // Notifications
  inAppNotifications Boolean @default(true)
  emailNotifications Boolean @default(false)
  notifyNewFollower  Boolean @default(true)
  notifyMention      Boolean @default(true)
  notifyComment      Boolean @default(true)
  notifyLike         Boolean @default(false)

  // Content & Feed
  feedStyle          FeedStyle @default(MIXED)
  autoplayMedia      Boolean   @default(false)
  inlineLinkPreviews Boolean   @default(true)

  // Appearance & Accessibility
  theme        ThemePreference   @default(system)
  reduceMotion Boolean           @default(false)
  echoLayout   EchoLayoutDensity @default(FULL)
  feedDensity  FeedDensity       @default(ROWS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
